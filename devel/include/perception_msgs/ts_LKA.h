// Generated by gencpp from file perception_msgs/ts_LKA.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_TS_LKA_H
#define PERCEPTION_MSGS_MESSAGE_TS_LKA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct ts_LKA_
{
  typedef ts_LKA_<ContainerAllocator> Type;

  ts_LKA_()
    : header()
    , lanetype(0)
    , quality(0)
    , model(0)
    , View_range(0.0)
    , Position_C0(0.0)
    , Headingangle_C1(0.0)
    , Curvature_C2(0.0)
    , dCurvature_C3(0.0)
    , Lane_width(0.0)  {
    }
  ts_LKA_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lanetype(0)
    , quality(0)
    , model(0)
    , View_range(0.0)
    , Position_C0(0.0)
    , Headingangle_C1(0.0)
    , Curvature_C2(0.0)
    , dCurvature_C3(0.0)
    , Lane_width(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _lanetype_type;
  _lanetype_type lanetype;

   typedef int64_t _quality_type;
  _quality_type quality;

   typedef int64_t _model_type;
  _model_type model;

   typedef double _View_range_type;
  _View_range_type View_range;

   typedef double _Position_C0_type;
  _Position_C0_type Position_C0;

   typedef double _Headingangle_C1_type;
  _Headingangle_C1_type Headingangle_C1;

   typedef double _Curvature_C2_type;
  _Curvature_C2_type Curvature_C2;

   typedef double _dCurvature_C3_type;
  _dCurvature_C3_type dCurvature_C3;

   typedef double _Lane_width_type;
  _Lane_width_type Lane_width;





  typedef boost::shared_ptr< ::perception_msgs::ts_LKA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::ts_LKA_<ContainerAllocator> const> ConstPtr;

}; // struct ts_LKA_

typedef ::perception_msgs::ts_LKA_<std::allocator<void> > ts_LKA;

typedef boost::shared_ptr< ::perception_msgs::ts_LKA > ts_LKAPtr;
typedef boost::shared_ptr< ::perception_msgs::ts_LKA const> ts_LKAConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::ts_LKA_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::ts_LKA_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::ts_LKA_<ContainerAllocator1> & lhs, const ::perception_msgs::ts_LKA_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lanetype == rhs.lanetype &&
    lhs.quality == rhs.quality &&
    lhs.model == rhs.model &&
    lhs.View_range == rhs.View_range &&
    lhs.Position_C0 == rhs.Position_C0 &&
    lhs.Headingangle_C1 == rhs.Headingangle_C1 &&
    lhs.Curvature_C2 == rhs.Curvature_C2 &&
    lhs.dCurvature_C3 == rhs.dCurvature_C3 &&
    lhs.Lane_width == rhs.Lane_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::ts_LKA_<ContainerAllocator1> & lhs, const ::perception_msgs::ts_LKA_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::ts_LKA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::ts_LKA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::ts_LKA_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::ts_LKA_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::ts_LKA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::ts_LKA_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::ts_LKA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "735c1f26da9c3fb23d10971553941226";
  }

  static const char* value(const ::perception_msgs::ts_LKA_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x735c1f26da9c3fb2ULL;
  static const uint64_t static_value2 = 0x3d10971553941226ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::ts_LKA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/ts_LKA";
  }

  static const char* value(const ::perception_msgs::ts_LKA_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::ts_LKA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int64 lanetype  #0-dashed 1-solid 2-undecided 3-road edge 4-double lane mark 5-Botts' dots 6-invalid\n"
"int64 quality   #0,1-low quality 2,3-high quality\n"
"int64 model     # 1-linear, 2-parabolic, 3-3rd degree model\n"
"float64 View_range\n"
"float64 Position_C0\n"
"float64 Headingangle_C1\n"
"float64 Curvature_C2\n"
"float64 dCurvature_C3\n"
"float64 Lane_width\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::perception_msgs::ts_LKA_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::ts_LKA_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lanetype);
      stream.next(m.quality);
      stream.next(m.model);
      stream.next(m.View_range);
      stream.next(m.Position_C0);
      stream.next(m.Headingangle_C1);
      stream.next(m.Curvature_C2);
      stream.next(m.dCurvature_C3);
      stream.next(m.Lane_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ts_LKA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::ts_LKA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::ts_LKA_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lanetype: ";
    Printer<int64_t>::stream(s, indent + "  ", v.lanetype);
    s << indent << "quality: ";
    Printer<int64_t>::stream(s, indent + "  ", v.quality);
    s << indent << "model: ";
    Printer<int64_t>::stream(s, indent + "  ", v.model);
    s << indent << "View_range: ";
    Printer<double>::stream(s, indent + "  ", v.View_range);
    s << indent << "Position_C0: ";
    Printer<double>::stream(s, indent + "  ", v.Position_C0);
    s << indent << "Headingangle_C1: ";
    Printer<double>::stream(s, indent + "  ", v.Headingangle_C1);
    s << indent << "Curvature_C2: ";
    Printer<double>::stream(s, indent + "  ", v.Curvature_C2);
    s << indent << "dCurvature_C3: ";
    Printer<double>::stream(s, indent + "  ", v.dCurvature_C3);
    s << indent << "Lane_width: ";
    Printer<double>::stream(s, indent + "  ", v.Lane_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_TS_LKA_H
